[
    {
        "id": "f6edd2227154a2cf",
        "type": "tab",
        "label": "Smart UPS Flow1 (Github)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b9a89079f95d3c6e",
        "type": "group",
        "z": "f6edd2227154a2cf",
        "name": "",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "339cd1de29b09e5e",
            "a9abeeecc2e509f4",
            "f35def279c92dc7c",
            "3455dd4619982051",
            "b4ed5ac9f0910123",
            "d7ef4d595c0f24d8",
            "68d19b68a7f1849e",
            "ae6bee038d03ddec",
            "ea040c1df309ed06",
            "8f0bb1ea4ee99afb",
            "c5c6a3c0c3e5d198",
            "7b71c1d4f87231be",
            "7217d7a0422ceccf",
            "2351c87db2f11cab",
            "1fd3113a43a55426",
            "017c99acd2453ac9",
            "15f0cc2b12bf8511",
            "a32ec4a172c3579a",
            "0a9a71e8018dea08",
            "ad5ef58ca53dd4d8",
            "ca1aa4a15bb13978",
            "be3b4daf0d96464e",
            "6f6ad87b3cb68f62",
            "85ead83fd0d88129",
            "e4a58c60815f48e3",
            "ebf6c1357471e55e",
            "7ca3fd8358177179",
            "8f80d093e63d33c0",
            "1610fee36460f670",
            "e6abbb4a4f5d40d9",
            "0cdbb924db58f916"
        ],
        "x": 74,
        "y": 139,
        "w": 1132,
        "h": 1642
    },
    {
        "id": "339cd1de29b09e5e",
        "type": "mqtt in",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "",
        "topic": "EspSensor",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5b4425bc7eea8242",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160.00008392333984,
        "y": 406.00004386901855,
        "wires": [
            [
                "a9abeeecc2e509f4",
                "3455dd4619982051",
                "be3b4daf0d96464e"
            ]
        ]
    },
    {
        "id": "a9abeeecc2e509f4",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460.00008392333984,
        "y": 346.00004386901855,
        "wires": []
    },
    {
        "id": "f35def279c92dc7c",
        "type": "ui_gauge",
        "z": "f6edd2227154a2cf",
        "d": true,
        "g": "b9a89079f95d3c6e",
        "name": "",
        "group": "e2453e4cadca5843",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "donut",
        "title": "Battery Voltage Level",
        "label": "units",
        "format": "{{value}}",
        "min": "0",
        "max": "12",
        "colors": [
            "#f23b26",
            "#f5f529",
            "#57f542"
        ],
        "seg1": "10.8",
        "seg2": "11",
        "diff": false,
        "className": "",
        "x": 720,
        "y": 500,
        "wires": []
    },
    {
        "id": "3455dd4619982051",
        "type": "function",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "Manually Calculated here",
        "func": "/*\ncalculations for voltage and percentage \nusing averaging calculated analog reading\nfrom ESP32 over MQTT\n*/\nlet minVoltage = 10.9;\nlet maxVoltage = 12.13;\nlet scaleFactor = 3.675;\nlet analogvalue = msg.payload[\"sensor\"][\"analogValue\"];//JSON data from ESP32\nlet aveAnalogValue = 0;\nlet numSamples = 10;\nfor (let i = 0; i < numSamples; i++) {\n  aveAnalogValue += analogvalue / numSamples;\n}\n\nlet voltage = +((aveAnalogValue * 3.3) / (4095.00) * scaleFactor).toFixed(2);\nlet batteryPercentCalc = ((voltage - minVoltage) / (maxVoltage - minVoltage)) * 100.0;\nlet percentage = +(batteryPercentCalc).toFixed();\n\nif(percentage <= 0){\n  percentage = 0;\n}\n\nif (voltage >= 12.13){\n  percentage = 100;\n  return [{ \"payload\": voltage }, { \"payload\": percentage }];\n}else{\n  return [{ \"payload\": voltage }, { \"payload\": percentage }];\n}\n\n//return [{ \"payload\": voltage }, { \"payload\": percentage }];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 520,
        "wires": [
            [
                "0a9a71e8018dea08",
                "f35def279c92dc7c"
            ],
            [
                "ad5ef58ca53dd4d8",
                "ca1aa4a15bb13978"
            ]
        ]
    },
    {
        "id": "b4ed5ac9f0910123",
        "type": "ui_text",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "group": "2e484d67cec38b91",
        "order": 11,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Bat %",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 790,
        "y": 880,
        "wires": []
    },
    {
        "id": "d7ef4d595c0f24d8",
        "type": "comment",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "Smart UPS Node-red Canculations",
        "info": "These flows contain calculations to determine voltage and battery percentage based on analog reading from the ESP32",
        "x": 560,
        "y": 180,
        "wires": []
    },
    {
        "id": "68d19b68a7f1849e",
        "type": "mqtt in",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "",
        "topic": "esp32/battery_guage/analogSensorAvarage",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5b4425bc7eea8242",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 1700,
        "wires": [
            [
                "ea040c1df309ed06",
                "7217d7a0422ceccf"
            ]
        ]
    },
    {
        "id": "ae6bee038d03ddec",
        "type": "comment",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "Analog value straight to a topic",
        "info": "",
        "x": 550,
        "y": 1580,
        "wires": []
    },
    {
        "id": "ea040c1df309ed06",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1660,
        "wires": []
    },
    {
        "id": "8f0bb1ea4ee99afb",
        "type": "comment",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "Analog Value sent in JSON format",
        "info": "",
        "x": 560,
        "y": 280,
        "wires": []
    },
    {
        "id": "c5c6a3c0c3e5d198",
        "type": "ui_gauge",
        "z": "f6edd2227154a2cf",
        "d": true,
        "g": "b9a89079f95d3c6e",
        "name": "",
        "group": "6fb2c7c64d156049",
        "order": 2,
        "width": 4,
        "height": 2,
        "gtype": "gage",
        "title": "Battery Voltage Level",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "12",
        "colors": [
            "#ed3326",
            "#e6e600",
            "#45f722"
        ],
        "seg1": "10.8",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1040,
        "y": 1680,
        "wires": []
    },
    {
        "id": "7b71c1d4f87231be",
        "type": "ui_text",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "group": "6fb2c7c64d156049",
        "order": 3,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "Bat2 %",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1000,
        "y": 1720,
        "wires": []
    },
    {
        "id": "7217d7a0422ceccf",
        "type": "function",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "function 19",
        "func": "/*\ncalculations for voltage and percentage \nusing averaging calculated analog reading\nfrom ESP32 over MQTT\n*/\nlet minVoltage = 10.9;\nlet maxVoltage = 12.13;\nlet aveAnalogValue = 0;\nlet scaleFactor = 3.675;\nlet analogvalue = msg.payload;//JSON data from ESP32\nlet numSamples = 20;\nfor (let i = 0; i < numSamples; i++) {\n  aveAnalogValue += analogvalue / numSamples;\n}\n\nlet voltage = +((aveAnalogValue * 3.3) / (4095.00) * scaleFactor).toFixed(2);\nlet batteryPercentCalc = ((voltage - minVoltage) / (maxVoltage - minVoltage)) * 100.0;\nlet percentage = +(batteryPercentCalc).toFixed();\n\nif(percentage <= 0){\n  percentage = 0;\n}\n\nif (voltage >= 12.13){\n  percentage = 100;\n  return [{ \"payload\": voltage }, { \"payload\": percentage }];\n}else{\n  return [{ \"payload\": voltage }, { \"payload\": percentage }];\n}\n//return [{ \"payload\": voltage }, { \"payload\": percentage }];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1700,
        "wires": [
            [
                "c5c6a3c0c3e5d198",
                "7ca3fd8358177179"
            ],
            [
                "8f80d093e63d33c0",
                "1610fee36460f670",
                "7b71c1d4f87231be"
            ]
        ]
    },
    {
        "id": "923cd0cbb91867bb",
        "type": "mqtt out",
        "z": "f6edd2227154a2cf",
        "name": "",
        "topic": "esp32/battery_guage/inTopic",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5b4425bc7eea8242",
        "x": 680.0000839233398,
        "y": 1266.0000438690186,
        "wires": []
    },
    {
        "id": "1fd3113a43a55426",
        "type": "comment",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "Server Shutdown and restart Button",
        "info": "",
        "x": 580,
        "y": 1220,
        "wires": []
    },
    {
        "id": "31d2f1dcda2f8f0b",
        "type": "ui_button",
        "z": "f6edd2227154a2cf",
        "name": "",
        "group": "2e484d67cec38b91",
        "order": 13,
        "width": 3,
        "height": 2,
        "passthru": false,
        "label": "Shutdown 1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210.00008392333984,
        "y": 1306.0000438690186,
        "wires": [
            [
                "98656f5a5ca2c189",
                "f9b58086c0e6ccdb"
            ]
        ]
    },
    {
        "id": "98656f5a5ca2c189",
        "type": "rbe",
        "z": "f6edd2227154a2cf",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 430.00008392333984,
        "y": 1306.0000438690186,
        "wires": [
            [
                "923cd0cbb91867bb",
                "d41e81854b4a2976"
            ]
        ]
    },
    {
        "id": "2351c87db2f11cab",
        "type": "ui_button",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "",
        "group": "2e484d67cec38b91",
        "order": 12,
        "width": 3,
        "height": 2,
        "passthru": false,
        "label": "Boot 1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210.00008392333984,
        "y": 1366.0000438690186,
        "wires": [
            [
                "98656f5a5ca2c189",
                "f9b58086c0e6ccdb"
            ]
        ]
    },
    {
        "id": "a32ec4a172c3579a",
        "type": "ui_text",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "group": "2e484d67cec38b91",
        "order": 14,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Server Status 1",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 940,
        "y": 1360,
        "wires": []
    },
    {
        "id": "b77417d67788ad76",
        "type": "trigger",
        "z": "f6edd2227154a2cf",
        "name": "",
        "op1": "Server Shutting down........",
        "op2": "Server Off",
        "op1type": "str",
        "op2type": "str",
        "duration": "9",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 740.0000839233398,
        "y": 1346.0000438690186,
        "wires": [
            [
                "a32ec4a172c3579a"
            ]
        ]
    },
    {
        "id": "75b9070510071f1d",
        "type": "trigger",
        "z": "f6edd2227154a2cf",
        "name": "",
        "op1": "Booting up ............",
        "op2": "Server On",
        "op1type": "str",
        "op2type": "str",
        "duration": "9",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 740.0000839233398,
        "y": 1386.0000438690186,
        "wires": [
            [
                "a32ec4a172c3579a"
            ]
        ]
    },
    {
        "id": "f9b58086c0e6ccdb",
        "type": "rbe",
        "z": "f6edd2227154a2cf",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 430.00008392333984,
        "y": 1366.0000438690186,
        "wires": [
            [
                "20c60cd306f41d92"
            ]
        ]
    },
    {
        "id": "20c60cd306f41d92",
        "type": "function",
        "z": "f6edd2227154a2cf",
        "name": "function 29",
        "func": "if(msg.payload == \"0\"){\n    msg.payload = \"0\";\n    return[null,msg];\n}else if (msg.payload == \"1\"){\n    msg.payload = \"1\";\n    return[msg,null]\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570.0000839233398,
        "y": 1366.0000438690186,
        "wires": [
            [
                "b77417d67788ad76"
            ],
            [
                "75b9070510071f1d"
            ]
        ]
    },
    {
        "id": "d41e81854b4a2976",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720.0000839233398,
        "y": 1306.0000438690186,
        "wires": []
    },
    {
        "id": "017c99acd2453ac9",
        "type": "mqtt in",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "",
        "topic": "esp32/battery_guage/relaystatus",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5b4425bc7eea8242",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 670,
        "y": 1440,
        "wires": [
            [
                "15f0cc2b12bf8511",
                "a32ec4a172c3579a"
            ]
        ]
    },
    {
        "id": "15f0cc2b12bf8511",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1440,
        "wires": []
    },
    {
        "id": "0a9a71e8018dea08",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 400,
        "wires": []
    },
    {
        "id": "ad5ef58ca53dd4d8",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 74",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 580,
        "wires": []
    },
    {
        "id": "ca1aa4a15bb13978",
        "type": "function",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "Percentage Push",
        "func": "let percent = msg.payload;\nmsg.payload = percent;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 540,
        "wires": [
            [
                "ebf6c1357471e55e",
                "e4a58c60815f48e3"
            ]
        ]
    },
    {
        "id": "be3b4daf0d96464e",
        "type": "function",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "Data Pulled ESP32",
        "func": "/*This date is pulled from the internal calcultion done on the ESP32\n    pushed out as JSON data.\n*/\n\n\nlet analogvalue = +(msg.payload[\"sensor\"][\"analogValue\"]);\nlet voltage = +((msg.payload[\"sensor\"][\"voltage\"])).toFixed(2);\nlet percentage = +(msg.payload[\"sensor\"][\"batPercentage\"]).toFixed();\nlet batFull;\n\nif(percentage <= 0){\n  percentage = 0;\n}\nif (voltage >= 12.13){\n  percentage = 100;\n  return [{ \"payload\": voltage }, { \"payload\": percentage }];\n}else{\n  return [{ \"payload\": voltage }, { \"payload\": percentage }];\n}\n//return [{ \"payload\": voltage }, { \"payload\": percentage }];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 432,
        "y": 873,
        "wires": [
            [
                "6f6ad87b3cb68f62"
            ],
            [
                "85ead83fd0d88129",
                "b4ed5ac9f0910123"
            ]
        ]
    },
    {
        "id": "6f6ad87b3cb68f62",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 75",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 602,
        "y": 793,
        "wires": []
    },
    {
        "id": "85ead83fd0d88129",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 76",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 602,
        "y": 953,
        "wires": []
    },
    {
        "id": "e4a58c60815f48e3",
        "type": "ui_template",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "group": "2e484d67cec38b91",
        "name": "",
        "order": 10,
        "width": 6,
        "height": 2,
        "format": "<div style=\"width: 295px; border: 2px solid #333; border-radius: 4px; padding: 2px; position: relative;\">\n    <div id=\"battery\" style=\"width: 0%; height: 30px; background-color: #33ff38; border-radius: 2px;\"></div><div></div>\n    <div style=\"position: center; top: 10px; left: 0; right: 0; text-align: center; font-size: 18px; color: #1f1e1e;\" id=\"battery-text\"></div>\n</div>\n\n<script>\n    (function(scope) {\n        scope.$watch('msg.payload', function(value) {\n            if (value) {\n                var batteryElement = document.getElementById('battery');\n                var batteryText = document.getElementById('battery-text');\n                \n                // Ensure value is within 0 to 100\n                value = Math.max(0, Math.min(100, value));\n\n                batteryElement.style.width = value + '%';\n                \n                // Change color based on battery level\n                if (value > 75) {\n                    batteryElement.style.backgroundColor = '#33ff38';\n                } else if (value > 25) {\n                    batteryElement.style.backgroundColor = '#f7ff33';\n                } else {\n                    batteryElement.style.backgroundColor = '#f61409';\n                }\n                \n                batteryText.innerText = value + '%';\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1100,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "ebf6c1357471e55e",
        "type": "ui_gauge",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "",
        "group": "2e484d67cec38b91",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "wave",
        "title": "Smart UPS",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#e51515",
            "#e6e600",
            "#58ed07"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1110,
        "y": 500,
        "wires": []
    },
    {
        "id": "7ca3fd8358177179",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1660,
        "wires": []
    },
    {
        "id": "8f80d093e63d33c0",
        "type": "debug",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1740,
        "wires": []
    },
    {
        "id": "1610fee36460f670",
        "type": "ui_gauge",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "",
        "group": "6fb2c7c64d156049",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "wave",
        "title": "Smart UPS",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#e51515",
            "#e6e600",
            "#58ed07"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1010,
        "y": 1640,
        "wires": []
    },
    {
        "id": "e6abbb4a4f5d40d9",
        "type": "json",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "0cdbb924db58f916",
        "type": "comment",
        "z": "f6edd2227154a2cf",
        "g": "b9a89079f95d3c6e",
        "name": "READ ME",
        "info": "****Pallets to install for this project:\n\nnode-red-dashboard",
        "x": 160,
        "y": 240,
        "wires": []
    },
    {
        "id": "6e64655ff3b2ea78",
        "type": "ui_spacer",
        "z": "f6edd2227154a2cf",
        "name": "spacer",
        "group": "2e484d67cec38b91",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "ac7adade026c0ef2",
        "type": "ui_spacer",
        "z": "f6edd2227154a2cf",
        "name": "spacer",
        "group": "2e484d67cec38b91",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "d52c29d177e7fd65",
        "type": "ui_spacer",
        "z": "f6edd2227154a2cf",
        "name": "spacer",
        "group": "2e484d67cec38b91",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "189160afefc5ff60",
        "type": "ui_spacer",
        "z": "f6edd2227154a2cf",
        "name": "spacer",
        "group": "2e484d67cec38b91",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "33ee7f846dd05d59",
        "type": "ui_spacer",
        "z": "f6edd2227154a2cf",
        "name": "spacer",
        "group": "2e484d67cec38b91",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "a93215b76921f0fe",
        "type": "ui_spacer",
        "z": "f6edd2227154a2cf",
        "name": "spacer",
        "group": "2e484d67cec38b91",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "58eda0c41e3144f3",
        "type": "ui_spacer",
        "z": "f6edd2227154a2cf",
        "name": "spacer",
        "group": "2e484d67cec38b91",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "26bd2c204b0ff3df",
        "type": "ui_spacer",
        "z": "f6edd2227154a2cf",
        "name": "spacer",
        "group": "2e484d67cec38b91",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "5b4425bc7eea8242",
        "type": "mqtt-broker",
        "name": "Remote Mqtt",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e2453e4cadca5843",
        "type": "ui_group",
        "name": "Battery Guages",
        "tab": "20400988d4e3dd76",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2e484d67cec38b91",
        "type": "ui_group",
        "name": "Battery Status",
        "tab": "799b2eecb386da4c",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6fb2c7c64d156049",
        "type": "ui_group",
        "name": "MQTT SENSORS",
        "tab": "799b2eecb386da4c",
        "order": 2,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "20400988d4e3dd76",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "799b2eecb386da4c",
        "type": "ui_tab",
        "name": "Sensors",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
